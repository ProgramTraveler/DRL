{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"from kaggle_environments import make, evaluate\n\n# Create the game environment\n# Set debug=True to see the errors if your agent refuses to run\nenv = make(\"connectx\", debug=True)\n\n# List of available default agents\nprint(list(env.agents))","metadata":{"execution":{"iopub.status.busy":"2023-09-14T12:17:29.337638Z","iopub.execute_input":"2023-09-14T12:17:29.338085Z","iopub.status.idle":"2023-09-14T12:17:29.388427Z","shell.execute_reply.started":"2023-09-14T12:17:29.338048Z","shell.execute_reply":"2023-09-14T12:17:29.387384Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Two random agents play one game round\nenv.run([\"random\", \"random\"])\n\n# Show the game\nenv.render(mode=\"ipython\")","metadata":{"execution":{"iopub.status.busy":"2023-09-14T12:17:29.390339Z","iopub.execute_input":"2023-09-14T12:17:29.390845Z","iopub.status.idle":"2023-09-14T12:17:29.539849Z","shell.execute_reply.started":"2023-09-14T12:17:29.390812Z","shell.execute_reply":"2023-09-14T12:17:29.538512Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import random\nimport numpy as np","metadata":{"execution":{"iopub.status.busy":"2023-09-14T12:17:29.541177Z","iopub.execute_input":"2023-09-14T12:17:29.542107Z","iopub.status.idle":"2023-09-14T12:17:29.546260Z","shell.execute_reply.started":"2023-09-14T12:17:29.542075Z","shell.execute_reply":"2023-09-14T12:17:29.545304Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Selects random valid column\ndef agent_random(obs, config):\n    valid_moves = [col for col in range(config.columns) if obs.board[col] == 0]\n    return random.choice(valid_moves)\n\n# Selects middle column\ndef agent_middle(obs, config):\n    return config.columns//2\n\n# Selects leftmost valid column\ndef agent_leftmost(obs, config):\n    valid_moves = [col for col in range(config.columns) if obs.board[col] == 0]\n    return valid_moves[0]","metadata":{"execution":{"iopub.status.busy":"2023-09-14T12:17:29.548711Z","iopub.execute_input":"2023-09-14T12:17:29.549708Z","iopub.status.idle":"2023-09-14T12:17:29.558998Z","shell.execute_reply.started":"2023-09-14T12:17:29.549675Z","shell.execute_reply":"2023-09-14T12:17:29.558116Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Agents play one game round\nenv.run([agent_leftmost, agent_random])\n\n# Show the game\nenv.render(mode=\"ipython\")","metadata":{"execution":{"iopub.status.busy":"2023-09-14T12:17:29.560268Z","iopub.execute_input":"2023-09-14T12:17:29.560876Z","iopub.status.idle":"2023-09-14T12:17:29.632969Z","shell.execute_reply.started":"2023-09-14T12:17:29.560844Z","shell.execute_reply":"2023-09-14T12:17:29.632118Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def get_win_percentages(agent1, agent2, n_rounds=100):\n    # Use default Connect Four setup\n    config = {'rows': 6, 'columns': 7, 'inarow': 4}\n    # Agent 1 goes first (roughly) half the time          \n    outcomes = evaluate(\"connectx\", [agent1, agent2], config, [], n_rounds//2)\n    # Agent 2 goes first (roughly) half the time      \n    outcomes += [[b,a] for [a,b] in evaluate(\"connectx\", [agent2, agent1], config, [], n_rounds-n_rounds//2)]\n    print(\"Agent 1 Win Percentage:\", np.round(outcomes.count([1,-1])/len(outcomes), 2))\n    print(\"Agent 2 Win Percentage:\", np.round(outcomes.count([-1,1])/len(outcomes), 2))\n    print(\"Number of Invalid Plays by Agent 1:\", outcomes.count([None, 0]))\n    print(\"Number of Invalid Plays by Agent 2:\", outcomes.count([0, None]))","metadata":{"execution":{"iopub.status.busy":"2023-09-14T12:17:29.634136Z","iopub.execute_input":"2023-09-14T12:17:29.635560Z","iopub.status.idle":"2023-09-14T12:17:29.644297Z","shell.execute_reply.started":"2023-09-14T12:17:29.635527Z","shell.execute_reply":"2023-09-14T12:17:29.643336Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"get_win_percentages(agent1=agent_middle, agent2=agent_random)","metadata":{"execution":{"iopub.status.busy":"2023-09-14T12:17:29.645958Z","iopub.execute_input":"2023-09-14T12:17:29.646671Z","iopub.status.idle":"2023-09-14T12:17:36.010065Z","shell.execute_reply.started":"2023-09-14T12:17:29.646636Z","shell.execute_reply":"2023-09-14T12:17:36.009044Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"get_win_percentages(agent1=agent_leftmost, agent2=agent_random)","metadata":{"execution":{"iopub.status.busy":"2023-09-14T12:17:36.011360Z","iopub.execute_input":"2023-09-14T12:17:36.012572Z","iopub.status.idle":"2023-09-14T12:17:42.969552Z","shell.execute_reply.started":"2023-09-14T12:17:36.012538Z","shell.execute_reply":"2023-09-14T12:17:42.968578Z"},"trusted":true},"execution_count":null,"outputs":[]}]}
